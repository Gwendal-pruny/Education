/*
 * JavaScript 101
 * (3) Objets
 * üî® Cr√©er un objet
 * üî® Manipuler une cha√Æne de caract√®res
 * üî® Ô∏èManipuler une liste
 * üî® Ô∏èManipuler un objet
 */


/////////////////////////////////////////////////////////////////////////////////////////////
// üî® Cr√©er un objet
/////////////////////////////////////////////////////////////////////////////////////////////
/* Comme vu pr√©c√©demment, un objet Javascript se cr√©e assez simplement √† l'aide d'accolades
 * dans lesquels nous √©crivons des paires de valeurs associ√©es √† des propri√©t√©s (cl√©s).
 * Les valeurs peuvent d'√™tre de tout type, faire r√©f√©rence √† des variables existantes, etc.
 */
const roles = ["Utilisateur", "Administrateur"];

const user = {
    email_address: "test@example.com",
    age: 25,
    role: roles[0]
};


/////////////////////////////////////////////////////////////////////////////////////////////
// üî® Manipuler une cha√Æne de caract√®res
/////////////////////////////////////////////////////////////////////////////////////////////
/* On peut modifier une cha√Æne de caract√®res de diff√©rentes fa√ßons gr√¢ce √† de nombreuses
 * fonctions disponibles dessus :
 *     .indexOf(string) pour avoir la position d'une cha√Æne, si elle y est pr√©sente
 *     .replace(ancien, nouveau) pour remplacer un bout de cha√Æne par une autre
 *     .toUpperCase() pour passer son contenu en majuscules
 *     .toLowerCase() pour passer son contenu en minuscules
  *    .split(separateur) pour d√©couper une cha√Æne et la transformer en liste
 */

console.log("Navigation vers le Grand Palais".indexOf("Grand Palais"));
console.log("Ce soir : pluie".replace("pluie", "neige"));
console.log("un,deux,trois".split(","));
console.log("bonjour √† TOUS".toUpperCase());
console.log("BONSOIR TOUT LE monde".toLowerCase());


/////////////////////////////////////////////////////////////////////////////////////////////
// üî® Ô∏èManipuler une liste
/////////////////////////////////////////////////////////////////////////////////////////////
/* Les listes ont √©galement leur lot de m√©thodes permettant d'en modifier le contenu.
 */
let food = ["Ramen", "Gyudon", "Soba"];

// La m√©thode .push(el) ajoute un √©l√©ment √† la fin du tableau
food.push("Udon");
console.log(food);

// La m√©thode .unshift(el) va au contraire ajouter l'√©l√©ment au d√©but du tableau
food.unshift("Onigiri");
console.log(food);

// La m√©thode .pop() va √† la fois supprimer le dernier √©l√©ment du tableau, et le retourner
const lastItem = food.pop();
console.log(lastItem);
console.log(food);

// La m√©thode .shift() fera la m√™me chose mais avec le premier √©l√©ment du tableau
const firstItem = food.shift();
console.log(firstItem);
console.log(food);

/* La m√©thode .splice(debut, nb) va supprimer le nombre d'√©l√©ments voulus √† partir de l'index
 * pass√© comme premier argument. Pr√©ciser "1" √©l√©ment va donc supprimer l'√©l√©ment situ√©
 * directement √† cet index. La m√©thode renvoie un tableau contenant les √©l√©ments supprim√©s.
 */
const removedItem = food.splice(1, 1);
console.log(removedItem);
console.log(food);


/////////////////////////////////////////////////////////////////////////////////////////////
// üî® Ô∏èManipuler un objet
/////////////////////////////////////////////////////////////////////////////////////////////
/* La manipulation des objets n'est pas bien compliqu√©e, car elle s'apparente √† la
 * simple manipulation de variables.
 */
const pizza = {
    nom: "Margherita",
    ingredients: [
        "tomates",
        "mozzarella"
    ],
    supplement: "fromage",
    pate: "classique"
}

// La valeur d'un objet se remplace comme avec une variable
pizza.pate = "fine";
console.log(pizza);

// Exemple de modification d'un tableau pr√©sent dans l'objet
pizza.ingredients.push("basilic");
console.log(pizza);

// La suppression d'une valeur se fait √©galement comme la suppression d'une variable
delete pizza.supplement;
console.log(pizza);
