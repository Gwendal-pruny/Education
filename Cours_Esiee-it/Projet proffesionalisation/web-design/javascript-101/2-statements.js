/*
 * JavaScript 101
 * (2) D√©clarations
 * üñäÔ∏è Ô∏èLes structures conditionnelles - if / else if / else
 * üñäÔ∏è Ô∏èL'op√©rateur conditionnel "?"
 * üñäÔ∏è La boucle for
 * üñäÔ∏è La boucle for...of
 * üñäÔ∏è La boucle for...in
 * üñäÔ∏è La boucle while
 * üñäÔ∏è L'instruction switch
 */


/////////////////////////////////////////////////////////////////////////////////////////////
// üñäÔ∏è Ô∏èLes structures conditionnelles - if / else if / else
/////////////////////////////////////////////////////////////////////////////////////////////
/* Les expression bool√©ennes, vues dans le chapitre pr√©c√©dent, s'utilisent g√©n√©ralement au
 * sein de structures conditionnelles, qui vont ex√©cuter un bout de code ou un autre selon
 * si l'expression √©quivaut √† vrai ou faux. La base de tout code informatique en somme !
 * La structure "if" √©tant un bloc, on √©crit l'expression bool√©enne entre parenth√®ses,
 * puis le code √† ex√©cuter entre accolades.
 */

if (100 < 404) {
    console.log("100 est bien inf√©rieur √† 404.");
}

/* Si l'on veut ex√©cuter un autre morceau de code dans le cas o√π l'expression bool√©enne
 * soit fausse, on peut ajouter √† la fin du bloc existant un "else" avec un nouveau bloc.
 */

let weather = "sunny";

if (weather == "cloudy") {
    console.log("Il fait nuageux");
} else {
    console.log("Il n'y a pas sp√©cialement de nuages");
}

/* Pour repr√©senter des conditions plus complexes, on peut v√©rifier si d'autres expressions
 * sont vraies ou fausses lorsque le premier "if" est faux. On utilise donc des "else if",
 * et lorsqu'une expression est vraie, son code sera ex√©cut√©, sans ex√©cuter le reste.
 */

weather = "rainy";

if (weather == "cloudy") {
    console.log("Il fait nuageux");
} else if (weather == "rainy") {
    console.log("Il pleut");
} else {
    console.log("Aucune id√©e de la m√©t√©o");
}


/////////////////////////////////////////////////////////////////////////////////////////////
// üñäÔ∏è Ô∏èL'op√©rateur conditionnel "?"
/////////////////////////////////////////////////////////////////////////////////////////////
/* Lorsque l'on souhaite tout simplement attribuer une valeur diff√©rente √† une variable en
 * fonction d'une expression bool√©enne, il existe une fa√ßon raccourcie de faire cela.
 * Voyons d'abord comment l'on ferait avec un simple "if" comme vu pr√©c√©demment.
 */
const age = 22;

let message = "";
if (age > 18) {
    message = "Autoris√©";
} else {
    message = "Interdit";
}

/* Ce genre d'attribution de valeur tr√®s simple, selon si une expression bool√©enne est vraie
 * ou fausse, peut s'√©crire de fa√ßon raccourcie avec l'op√©rateur conditionnel "?".
 * A droite du nom de notre variable, o√π s'√©crit normalement la valeur souhait√©e,
 * on √©crit alors comme ceci :
 * (expression bool√©enne) ? (valeur si vrai) : (valeur si faux)
 */

const alerte = age > 18 ? "Autoris√©" : "Interdit"; // => "Autoris√©"


/////////////////////////////////////////////////////////////////////////////////////////////
// üñäÔ∏è La boucle for
/////////////////////////////////////////////////////////////////////////////////////////////
/* Destin√©e √† ex√©cuter le m√™me code plusieurs fois de suite, la boucle "for" r√©alise cela √†
 * l'aide d'un nombre qui augmente ou r√©duit de valeur, afin de suivre le nombre de fois
 * que le code a √©t√© ex√©cut√© et afin de savoir quand il faudra s'arr√™ter.
 * Chaque "ex√©cution de code" par la boucle s'appelle alors une "it√©ration".
 * La variable est d'abord d√©clar√©e (g√©n√©ralement "i" par convention) avec sa valeur
 * de d√©part, puis on d√©cide de l'expression bool√©enne qui ex√©cutera la boucle "for" tant
 * que sa valeur est vraie, et enfin on d√©cide de comment la variable sera modifi√©e
 * apr√®s chaque it√©ration.
 * Attention, cette variable √©tant d√©clar√©e dans le bloc "for", elle ne sera pas disponible
 * en dehors de ce dernier.
 */

// En partant √† z√©ro ; tant que i est inf√©rieur √† 4 ; en ajoutant 1 √† i apr√®s chaque it√©ration
for (let i = 0; i <= 4; i++) {
    console.log(`It√©ration n¬∞${i}`);
}

// En partant de 3 ; tant que i est sup√©rieur √† 0 ; en soustrayant 1 √† i apr√®s chaque it√©ration
for (let i = 3; i > 0; i--) {
    console.log(`It√©ration n¬∞${i}`);
}


/////////////////////////////////////////////////////////////////////////////////////////////
// üñäÔ∏è La boucle for...of
/////////////////////////////////////////////////////////////////////////////////////////////
/* La fa√ßon la plus simple d'it√©rer sur les valeurs de quelque chose est d'utiliser le
 * bloc "for" en utilisant le mot-cl√© "of". On d√©cide alors du nom de la variable qui
 * aura pour valeur l'√©l√©ment lu lors d'une it√©ration sur une liste (ou quelque chose
 * qui s'y ressemble).
 */

const hotDrinks = ["Espresso", "Cappuccino", "Mochaccino"];

// Pour chaque "coffee" dans "hotDrinks"
for (const coffee of hotDrinks) {
    console.log(coffee);
}

/* On peut aussi utiliser ce "for" sur les choses qui sont semblables √† une liste,
 * comme une cha√Æne de caract√®res. L'√©l√©ment parcouru sera alors une lettre.
 */
// Pour chaque "lettre" de la cha√Æne "Shinkansen"
for (const letter of "Shinkansen") {
    console.log(letter);
}

/* Si l'on souhaite it√©rer sur un objet tout en ayant √† la fois la cl√© et la valeur
 * parcourue √† chaque it√©ration, il faudra faire appel √† la fonction Object.entries().
 * Ce dernier cr√©e √† la vol√©e une version it√©rable de notre objet, renvoyant alors
 * une liste √† chaque it√©ration contenant d'abord la cl√© puis la valeur parcourue.
 */

const subwayLine = {
    name: "Asakusa",
    company: "Tokyo Metro",
    opening: 1927
};

// Pour chaque couple de cl√© et valeur dans l'objet "subwayLine"
for (const [key, value] of Object.entries(subwayLine)) {
    console.log(`${key} : ${value}`);
}


/////////////////////////////////////////////////////////////////////////////////////////////
// üñäÔ∏è La boucle for...in
/////////////////////////////////////////////////////////////////////////////////////////////
/* Une autre fa√ßon d'it√©rer sur un objet est d'utiliser la boucle "for" avec le mot-cl√© "in".
 * Contrairement √† ce qui a √©t√© vu ci-dessus, ce mot-cl√© va permettre d'it√©rer sur les cl√©s
 * d'un objet, nous laissant ainsi le soin d'acc√©der √† la valeur correspondant √† cette cl√©.
 */

const specs = {
    processor: "Ryzen 9",
    ram: 512,
    ssd: 256
};
// Pour chaque cl√© dans "specs"
for (const key in specs) {
    const value = specs[key];
    console.log(`${key} = ${value}`);
}


/////////////////////////////////////////////////////////////////////////////////////////////
// üñäÔ∏è L'instruction switch
/////////////////////////////////////////////////////////////////////////////////////////////
/* Dans le cas o√π l'on veuille ex√©cuter un bout de code en fonction de la valeur d'une
 * variable, l'instruction "switch" peut s'av√©rer utile en remplacement de plusieurs
 * "if" et "else if".
 * Voyons d'abord un exemple de "if" et "else if" que l'on veut √©crire avec un "switch".
 */

const transport = "tramway";

if (transport == "train") {
    console.log("Vous pouvez venir √† l'aide du RER A.");
} else if (transport == "tramway") {
    console.log("Le tramway 2 dessert le stade.");
} else if (transport == "metro") {
    console.log("La ligne 1 est √† 10 minutes de marche du stade.");
}

/* On √©crit l'instruction "switch" en pr√©cisant la variable dont on veut v√©rifier la valeur,
 * puis l'on √©crit diff√©rents cas (case) selon les valeurs possibles.
 * Au sein de chaque cas, on √©crit le code que l'on veut ex√©cuter, suivis de
 * l'instruction "break" pour terminer le fonctionnement du "switch".
 */
switch (transport) {
    case "train":
        console.log("Vous pouvez venir √† l'aide du RER A.");
        break;
    case "tramway":
        console.log("Le tramway 2 dessert le stade.");
        break;
    case "metro":
        console.log("La ligne 1 est √† 10 minutes de marche du stade.");
        break;
}

/* La particularit√© (et la difficult√©) du bloc "switch" est que, d√®s qu'il rencontre un cas
 * o√π la valeur est √©gale √† la variable test√©e, il va ex√©cuter le code correspondant
 * √† ce cas ET tous le code des cas suivants. Vu que c'est un comportement que l'on veut
 * en g√©n√©ral √©viter, c'est pour cela que l'on rajoute l'instruction "break".
 * Cependant, lorsque l'on souhaite ce comportement, on peut retirer le "break" voire
 * retirer le contenu d'un cas afin d'ex√©cuter le m√™me code pour plusieurs cas.
 */

switch (transport) {
    case "train":
    case "tramway":
    case "metro":
        console.log("Vous venez en transports en commun.");
        break;
    case "voiture":
    case "moto":
        console.log("Vous venez en transports personnel.");
        break;
}
